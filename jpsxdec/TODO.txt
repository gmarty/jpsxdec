[Key]
 *   = normal priority
 -   = normal priority sub-item
 !   = high priority
 ?   = not sure if will implement
 x   = will not implement
 //  = done
 /   = partially done
 /?/ = done?
.....................

Important TODO
==============

# Presentation sector RANGE #
    _Background_
Video frames maintain the last sector number that contained frame data.
This sector is then (usually) used to determine the timing when a frame
should appear, called the "presentation sector".
    _Issue_
Often there are small gaps between video frames.
The last sector of a vide frame doesn't have to be the presentation sector
It could land anywhere within that gab.
If a video frame ends early, its presentation sector will be off
leading to warnings. Some flexibility should be allowed so these warnings
don't appear.
    _Suggested solution_
Replace the concept of a presentation sector with a presentation sector range.
* video presentation sector *range* to avoid system thinking we've deviated from the frame rate too much
* iki frame presentation time is unhappy since it ends early, add a range of presentation sectors
    _Effect to the user_
Reduce warning that presentation sector is a frame ahead/behind

Order of published sectors is wrong in new identification pipeline (Dredd esp)
    Change design to be 3 steps
    1. Identify sectors
       In some cases all the data processing will end up here
       Processed data can be attached to the sector it is associated with
    2. Process identified sectors
       For sectors data that was already processed in step 1,
       just pull out of the attached sector
    3. Forward processed data to listeners
    This could also make debugging a lot easier without a 12 layer stack

**ROBUST FRAME RATE DETECTION**
    _Background_
Most videos have a pretty consistent frame rate.
Some videos seem to have a NTSC fractional offset.
Some videos have variable frame rates.
The video encoder used to make the videos uses some random logic where to place frames.
    _Suggested solution_
After 10 years I still don't know...
Maybe there's a way by checking how much variance there is between frame lengths
Can we calculate the variance (stddev) and choose the smallest?
How about linear regression/least sum of squares?
By PSX design, max possible frame rate is 75 or 150 fps, could just fall back to those (gross)
Maybe add serialized value: Precise fps:Y/N to help know the difference
Containers mkv and mov support variable frame rates, but do not support raw rgb uncompressed video :(
    _Effect to the user_
More correct frame rates
AVIs generated for videos with variable frame rates are currently a mess - would like to fix that

# ISO9660 detection and replace #
    Redo generating paths backwards
    Handle files existing beyond the end of the disc
    ! Digimon World 2 has island directory records, use them?
        -> yes with new iso9660 index design
    Replace ISO 9660 items (this gets ugly with the extra bytes at the end of a file)


Improvements
============

# Java 6 Console #
    _Background_
Java <= 5 only had stdout PrintStream, which does not allow choosing the text
encoder (for non-English languages)
    _Suggested solution_
Use Java 6 Console to use proper encoding when printing to the console.

GUI improvements
    * Only show disc and index dropdown button when there are list entries
    * add double-click and arrow list
    * add keyboard actions on rows
    * Add About button
    * Add Exit button
    * Add selected count on Save All Selected button
    * Add tooltips for everything
    ? Is there a better Saving dialog design?
    * Bug: Ubuntu: only tree column is white, but text boxes have gray background
    ? Add hex viewer for files

New tabbed interface
    Add tabs, main tab still shows file structure,
    other tabs show one for each general disc item type (audio, video, pics, eventually SPU)
    Each tab will offer a "Select *" behavior, removing the current drop-down
    Each tab will offer a "Apply settings to all *", removing that (confusing) button
    Could also offer the ability to play all entries sequentially non-stop

Save/load CD name in index
    The CD name is collected during indexing, but isn't saved in the index
    Fix that

Mac
    Find better dropdown button?
        The current dropdown button works, but isn't really being used how it
        was designed. Maybe there is a better one out there.
        But any change would require extensive testing on Mac and Linux
    Experiment with other tree tables
        Java tree-tables have a long and ugly history. Maybe there is still
        another one that would be better. Still need Mac testing.
    Create mac app bundle
        Running a .jar on Mac works, but it would be cleaner if it could be
        packaged as a real application. There are ways to do it, but
        seem to require updating it for every Mac release.

New video GUI
    Includes 2 extra indicators:
        Playback position/progress
        Playback buffer capacity
    Choose scaling (100%, fit, etc.) and aspect ratio options (NTSC vs PAL)
    Change VideoPlayer into PlayerCanvas that also holds the progress bar and control buttons


Add list box when indexing that will show the items as they are discovered

* Print bs format in -static

? Make tutorial on ripping a game and using jpsxdec
? Update manual to cover game ripping

Log "Ahead of reading by x frames" more like "out of sync with frame timing" maybe?
"Frame in sectors 129921-129927 is missing chunk 6" -> "Frame found in sectors x-x is incomplete or missing data"


Issues
======
! Command-line selection of parallel audio? not currently supported

[GUI, internal] Java SourceDataLine is unreliable
    Write a wrapper to fix the issues
    * Bug: audio playback position is randomly reset by SDK
    * No events are triggered when the audio buffer runs out
    Only purpose is for real-time playback
    Then can register listeners with the SourceDataLine and let those events pause the
    other components indirectly. I believe using a timer to estimate when
	the next playback hunk should end, sleeping until then,
	and check again if things are as expected,
	but also waking up to other events as well.

Real-time audio/video playback issues
    Linux playback is hit-or-miss
        / Latest OpenJDK seems to finally be reliable on Ubuntu
    jPSXdec still has issues in a few cases
        * When audio doesn't start for a prolonged period, video frame queue fills and blocks
        * Playback ends when audio ends, even if frames remain
        Add a little silence per frame until the audio starts,
        then keep adding silence per frame after audio ends, until no more video frames.
        Hard part is knowing when audio starts/ends.
        (see replacing presentation sector with presentation time)
        * Pause video-only playback when reading is delayed
        * Skip audio in the rare case it is behind sector reading
            ? Need to address static (sequential sector) audio
    ? playback audio volume?
    x Never going to add seeking, way too much work

Proper handling when directory box is empty
    I'm not sure if the directory box really works when empty, check that


Bug when saving: sometimes there is leftover text in Message column (race condition)

* Test on Mac

Message about applying to all types - window title "Message"
"Could not identify anything in ..." message not translated

New features
============

Games to investigate
* Discworld 2
* BrainDead 13
* Fear Effect
* Magic the Gathering
* Aconcagua ending video
* Sentient
// Star Wars - Rebel Assault II
// Panekit - Infinitive Crafting Toy Case
// Love Games - Wai Wai Tennis [Service Price] [SLPS-01647] INTRO.STR - broken video (2336 sector as a file)

Replace
    with a prompt before applying changes
    which can be skipped with -y (don't prompt to apply changes)
    or -n (essentially a dry-run)
    * SPU
    * Add ability to replace using a PNG with (semi-)transparent pixels
    which would be painted over the original frame, then re-encoded
    x Crusader audio
    x Then introduce a shared -replace command

Editing disc items
    * SPU items samples/second varies by clip
    PSound offers the ability to choose the Hz of each, and renaming them
    * BS items don't inherently have dimensions,
    although certain ones can be inferred by the block count
    Otherwise only the user really knows what the dimensions are
    Currently an index is static
    Maybe the index should be editable and savable so the user can make these changes

Overwrite files option
    Add an option to not overwrite existing files


Add sound clip detection
    Raw data sent to the Sound Processing Unit (SPU)
    Packaged in VAG files
    PSound
    vgmtoolbox can do it?

SEQ
    vgmtoolbox can do it?

? Add CD audio detection/extraction
    ? Add CUE/TOC file parsing so the tracks can be identified

* Searching for static bitstream data

? Add option to save just 1 item allowing to specify name and location


Code improvements
=================
Create my own smaller/simpler arg parser
    The 3rd party argparser has been good, but has never really met my needs
    Implementing my own would simplify things nicely
    (some work is already done in jpsxdec.util.ArgParser)

General code stuff
    * Clean up all the TODOs
    * Proper handling for InterruptedException
    * Cleanup IllegalArgumentException and IllegalStateExceptions
    * Findbug fixes
    * Replace package.html with package-info.java

Replace "presentation sector" with just "presentation time"
    Presentation sector made sense when it was just sector based videos
    Now it's become a hinderance because the timestamps are needed
    to help fix the real-time player issue when video starts way before/after audio

Logger framework that supports thread context logging - removes all the log parameters

! Cleanup Main: Remove FeedbackStream and just use a Logger
/?/ show error/warn unused cmdline args

* Have separate DiscItemBuilderGuiFactory to create a gui from a DiscItemBuilder and cache it
* Log when frame rate detection fails

* change xa playback to better handle static (adjacent sector) streaming
* Figure out how to better organize all the RGB and YCbCr pixel formats

? Optimize AviWriter with buffers
    - Construct audio/video chunks in ram before writing
    - Write to buffered stream

? give each disk item a little slice of the disc
    ? let that manage the start/end sectors

? More robust contextual CD sector detection
    Trying to determine what type a sector is becomes difficult when considering data corruption
    may remove the possibility of random access, unless there is smart
    limited scope contextual detection considering adjacent sectors

"Invalid Crusader header 00000000000000000000000000000000"
	Any way to check where in the stream it is?

Research
========
Comparisons
    ! Compare ffmpeg ycbcr->rgb to PSX ycbcr->rgb
    * Compare against PSound
    * Compare against XA audio converter http://www.romhacking.net/utilities/894/
    * Castlevania seems to have movies with lots of extra frames at the end?
    * Compare Tim against various tools out there

Replicate exact PSX color conversion - maybe impossible!
    * Reverse engineer IDCT
        Create test movies with -0.5 identity IDCT
            Place single values at various locations in the matrix
            Place two values at various locations in the matrix
    * Reverse engineer YCbCr->RGB
        Create test movies with -0.5 identity IDCT that generate predictable DC coefficients
            Add remaining Cb and Cr values

Video encoder
    ? replacement GUI preview of replace changes
    ? What to do when partial replace detects the entire frame is different
    ? create movies from scratch
    ? Include Cb/Cr un-swap correction option
      so videos decoded with other programs can be re-encoded with consistent coloring
    // remove/merge redundant MDEC codes with AC=0 (FF7)



Game specific
    * Finish testing LoD iki: GOAST.IKI (end of disc 2), DENIN2.INI (middle of disc 3), DRAGON1.IKI
    * Finish Crusader tests
        . only audio
        . starts near end
        . missing audio chunk
        . missing audio sectors
        . missing video sectors
        . missing video chunk

* double-check what the EOF and Audio-end flags mean
/?/ Add disc opening to debug.log
/ VDP null frameNumber
/ Code coverage/unit testing
    / Make unit tests for the various layers of decoding:
      /  1) Opening/identifying various disc images
      // 2) Identification of the various sector types
      /  3) Indexing of the various item types
      /  1) Uncompression of various bitstreams
      /  2) Various ways to decode MDEC streams
/?/ Expose logger options
? Run unit tests against older versions
? associate sector identification with an index and store some disc identification in the index
    . will want to separate identification map from index
? Even when not upsampling chroma, utilize it for PsxYuv->JpgYuv matrix conversion
    ! Test how much difference there is between the two color sets
? When displaying progress, setup a timer to only update the display at most every second
* Index doesn't indicate generic type that is used in cmdline save all
/?/ Add LIST:INFO:ISFT to AVI
? Save and load gui ini on every change?
? https://github.com/Georgeto/XFileDialog
? Wield the power of Java: Multi-thread decoding (essentially use the player model)
? Highlight tree items that are checked for saving
? Visualize disc items location in the gui
? add DiscItemVideo.decodeFrame(int) for quick thumbnailing

Done or rejected /x/x/x/x/x/x/x/x/x/x/x/x/x/x/x/x/x/x/x/x/x/x/x/x/x/x/x/x/x/x

//Remove .mov from STR extensions
//Give up trying to verify CD sector header "File" should have any value
// Indexing overhaul:
    //Introduce contextual information to help identify sector types
    //Identifying video sectors by combining the frame data along the way and checking if its valid (FF7, Lain, Dredd)
    // Remove all traces of random access identification and only assume forward access
x Change visualization to output HTML page -> no, 20mb .html files are bad
x Finish function "identifySector()" in DiscItem
  to more quickly figure out what type of sectors are read (since it won't
  have to go through the whole list of like 10 types).
x Change sector reading to start by only reading the header, then read remaining as needed
    -> like to avoid handling possible ioexception everywhere
x PSX may not like replaced tims, check palette effect -> removed bmp tim replace
// [done via pipeline] crusader, bs, spu, tim, policenauts: static files need a pull-like design
    . How to handle?
        // contextual sector identification after seeing header?
        // normal static stream behavior? -> will conflict with spu and bs indexer
        // just process them unidentified? -> will conflict with spu and bs indexer
        // introduce new static file logic? treat the block of sectors as RandomAccessFile
            // sectors would have to be identified first
            // still issue with conflicting indexers
            . lain files could be included
            // unfortunately RandomAccessFile cannot be extended like this
        // use threads
        x otherwise stuck with a state machine
// Localize Main help
/ Add time log msg at end of save/index
// Can the 0 AC remover count them then have single message per frame?

------------------------------------------
User test feedback
* Saving dialog title weird
* Exit program button/menu
* [Save] button not really associated with selection
* More clearly associate list with right panel
? Ignore completely transparent paletted Tims
.....................
